pipeline {
    agent any
        environment {
        DOCKER_USERNAME = "badrivarun"     // docker username
          
    }

    stages {
        stage('Cleanup WS') {
            steps {
                deleteDir() 
            }
        }
        
        
        stage('Git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/badrivarun02/Spring-Boot-JavaWebApp-Project.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh """ pwd && ls -ltr
                       mvn clean install
                """    
            }
        }
        stage('archive and test result'){
          steps{
            // Archives the artifacts (in this case, .jar files)
            archiveArtifacts artifacts: '**/*.jar', followSymlinks: false
            }
        
        }
        stage(' Docker Image Build and tag ') {
          steps{
           script {
                def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins job name to lowercase
                withCredentials([usernamePassword(credentialsId: 'dockerpwd', passwordVariable: 'dockerp', usernameVariable: 'dockeruser')]) {
                        // Login into Docker account
                        // We can also use like this- sh "docker login -u ${dockeruser} -p ${dockerp}" for linux
                        sh """
                             docker login -u ${dockeruser} -p ${dockerp}
    
                             # Build the Docker image
                             docker build -t ${JOB}:${BUILD_NUMBER} .
    
                             # Tag the Docker image
                             docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}
                             docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest
                        """                  
             }
          }
        }
        }
        stage('Docker Image Push') {
            // Login to Dockerhub & Push the image to Dockerhub
            steps{
                script { 
                    def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins job name to lowercase
                
                // Method:1 
                    // withDockerRegistry(credentialsId: 'dockerpwd') {
                    //     bat "docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}" 
                    // }
                    // Method:2
                    // Convert Jenkins job name to lowercase
                    
                        // Push the Docker image to Dockerhub

                        sh """docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}
                              docker push ${DOCKER_USERNAME}/${JOB}:latest
                        """
                      
                  }
                }
            }
        stage('Docker Image Cleanup') {
            // Remove the unwanted (dangling) images created in Jenkins Server to free-up space
            steps{
                script { 
                    // This command removes all unused images not just dangling ones
                  sh "docker image prune -af"
                }
            }
        }
        stage('Update YAML and Push to Git') {
         steps {
          script {
            def filePath = 'Manifests'
            def JOB = env.JOB_NAME.toLowerCase()
           
              
            sh "cd ${filePath}"  // Corrected the path variable
            

            // Update the Docker image tag in your YAML file
            def newImageTag = "${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
            def yamlFile = readFile "${filePath}/deployment.yml"
            echo "Before update:\n${yamlFile}"

            // Define the old image tag pattern
            def oldImageTagPattern
            if (yamlFile =~ "${DOCKER_USERNAME}/${JOB}:v\\d+") {
                oldImageTagPattern = "${DOCKER_USERNAME}/${JOB}:v\\d+"
            } else if (yamlFile =~ "${DOCKER_USERNAME}/${JOB}:latest") {
                oldImageTagPattern = "${DOCKER_USERNAME}/${JOB}:latest"
            } else {
                oldImageTagPattern = "${DOCKER_USERNAME}/${JOB}"
            }

            def updatedYamlFile = yamlFile.replaceAll(oldImageTagPattern, newImageTag)
            writeFile file: "${filePath}/deployment.yml", text: updatedYamlFile
            echo "After update:\n${readFile "${filePath}/deployment.yml"}"
            sh "cat ${filePath}/deployment.yml" 
            
            withCredentials([gitUsernamePassword(credentialsId: 'githubcred', gitToolName: 'Default')]) {
            sh """
                git add "${filePath}/deployment.yml"
                git commit -m "Update Docker image tag"
                git push origin main
              """
               }
            }
          }
       }                               
       
    }
}
