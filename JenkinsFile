pipeline {
    agent any
        environment {
        DOCKER_USERNAME = "badrivarun"     // docker username
          
    }

    stages {
        stage('Cleanup WS') {
            steps {
                deleteDir() 
            }
        }
        
        
        stage('Git clone') {
            steps {
                git branch: 'main', url: 'https://github.com/badrivarun02/Spring-Boot-JavaWebApp-Project.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh """ pwd && ls -ltr
                       mvn clean install
                """    
            }
        }
        stage('Owasp') {
            steps {
                 
                 dependencyCheck additionalArguments: '--scan target/*.jar', odcInstallation: 'Dp-check'
                 dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                 
            }
        }
        stage('SonarQube analysis'){
          steps{
             withSonarQubeEnv('sonarsc'){
              sh 'mvn sonar:sonar'
        }
      }
    }
        stage('archive and test result'){
          steps{
            // Archives the artifacts (in this case, .jar files)
            archiveArtifacts artifacts: '**/*.jar', followSymlinks: false
            }
        
        }
        stage(' Docker Image Build and tag ') {
          steps{
           script {
                def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins job name to lowercase
                withCredentials([usernamePassword(credentialsId: 'dockerpwd', passwordVariable: 'dockerp', usernameVariable: 'dockeruser')]) {
                        
                        sh """
                             #Login into Docker account
                             docker login -u ${dockeruser} -p ${dockerp}
    
                             # Build the Docker image
                             docker build -t ${JOB}:${BUILD_NUMBER} .
    
                             # Tag the Docker image
                             docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}
                             docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest
                        """                  
             }
          }
        }
        }
        stage('Trivy Image Scan') {
            // Scan Docker images for vulnerabilities 
            steps{
                script { 
                  def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins Job name to lower-case
                  // Scan the Docker image using Trivy
                  sh "trivy image  ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER} > scan.txt"
                }
            }
        }
        stage('Docker Image Push') {
            // Login to Dockerhub & Push the image to Dockerhub
            steps{
                script { 
                    def JOB = env.JOB_NAME.toLowerCase() // Convert Jenkins job name to lowercase
                
                    sh """docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}
                          docker push ${DOCKER_USERNAME}/${JOB}:latest
                        """
                      
                  }
                }
            }
        stage('Update YAML and Push to Git') {
         steps {
          script {
            def filePath = 'Manifests/deployment.yml'
            def JOB = env.JOB_NAME.toLowerCase()
                    
            def newImageTag = "${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}"
            def yamlFile = readFile "${filePath}"
            echo "Before update:\n${yamlFile}"

            // Define the old image tag pattern
            def oldImageTagPattern
            if (yamlFile =~ "${DOCKER_USERNAME}/(\\w+):latest"){
              oldImageTagPattern = "${DOCKER_USERNAME}/(\\w+):latest"
            } else if (yamlFile =~ "${DOCKER_USERNAME}/(\\w+):v\\d+"){
              oldImageTagPattern = "${DOCKER_USERNAME}/(\\w+):v\\d+"
            } else{
              oldImageTagPattern = "${DOCKER_USERNAME}/${JOB}"
            }

            // Update the Docker image tag in your YAML file
            def updatedYamlFile = yamlFile.replaceAll(oldImageTagPattern, newImageTag)
            writeFile file: "${filePath}", text: updatedYamlFile
            echo "After update:\n${readFile "${filePath}"}"
            
            withCredentials([gitUsernamePassword(credentialsId: 'githubcred', gitToolName: 'Default')]) {
             sh """
                git add "${filePath}"
                git commit -m "Update Docker image tag"
                git push origin main
              """
               }
            }
          }
       }                               
       
    }
    post {
    always {
        script{
                  // Format the build timestamp
                env.BUILD_TIMESTAMP = new Date(currentBuild.startTimeInMillis).format('MMMM dd, yyy | hh:mm:ss aaa | z')
            }
            // Send an email with the build report
        emailext (
            subject: "${currentBuild.currentResult} Build Report as of ${BUILD_TIMESTAMP} â€” ${env.JOB_NAME}",
            body: """The Build report for ${env.JOB_NAME} executed via Jenkins has finished its latest run.

- Job Name: ${env.JOB_NAME}
- Job Status: ${currentBuild.currentResult}
- Job Number: ${env.BUILD_NUMBER}
- Job URL: ${env.BUILD_URL}

Please refer to the build information above for additional details.

This email is generated automatically by the system.

Thanks""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']],
            to: 'badrivarun09@gmail.com',
            attachLog: true
        )
    }
}
}
}
